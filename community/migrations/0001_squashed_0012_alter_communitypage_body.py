# Generated by Django 4.2.1 on 2023-05-24 05:56

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import re
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_color_panel.blocks


class Migration(migrations.Migration):
    replaces = [
        ("community", "0001_initial"),
        ("community", "0002_alter_communitypage_body"),
        ("community", "0003_alter_communitypage_body"),
        ("community", "0004_alter_communitypage_body"),
        ("community", "0005_alter_communitypage_body"),
        ("community", "0006_alter_communitypage_body"),
        ("community", "0007_alter_communitypage_body"),
        ("community", "0008_alter_communitypage_body"),
        ("community", "0009_alter_communitypage_body"),
        ("community", "0010_alter_communitypage_body"),
        ("community", "0011_alter_communitypage_body"),
        ("community", "0012_alter_communitypage_body"),
    ]

    initial = True

    dependencies = [
        ("wagtailcore", "0066_collection_management_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommunityDirectory",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("description", wagtail.fields.RichTextField(blank=True)),
                ("website", models.URLField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "community directories",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="CommunityDirectoryIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="OnlineWorshipIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="OnlineWorship",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("description", wagtail.fields.RichTextField(blank=True)),
                ("times_of_worship", wagtail.fields.RichTextField(blank=True)),
                ("website", models.URLField(blank=True, null=True)),
                (
                    "hosted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="online_worship",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="CommunityPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "heading",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_level",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "h2",
                                                        "Level 2 (child of level 1)",
                                                    ),
                                                    (
                                                        "h3",
                                                        "Level 3 (child of level 2)",
                                                    ),
                                                    (
                                                        "h4",
                                                        "Level 4 (child of level 3)",
                                                    ),
                                                    (
                                                        "h5",
                                                        "Level 5 (child of level 4)",
                                                    ),
                                                    (
                                                        "h6",
                                                        "Level 6 (child of level 5)",
                                                    ),
                                                ],
                                                help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                            ),
                                        ),
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="The text to appear in the heading.",
                                            ),
                                        ),
                                        (
                                            "target_slug",
                                            wagtail.blocks.CharBlock(
                                                help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                                required=False,
                                                validators=(
                                                    django.core.validators.RegexValidator(
                                                        re.compile(
                                                            "^[-a-zA-Z0-9_]+\\Z",
                                                        ),
                                                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                        "invalid",
                                                    ),
                                                ),
                                            ),
                                        ),
                                        (
                                            "color",
                                            wagtail_color_panel.blocks.NativeColorBlock(
                                                required=False,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            ("rich_text", wagtail.blocks.RichTextBlock()),
                            ("image", wagtail.images.blocks.ImageChooserBlock()),
                            (
                                "card",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "title",
                                            wagtail.blocks.CharBlock(
                                                help_text="Add a title",
                                                required=True,
                                            ),
                                        ),
                                        (
                                            "text",
                                            wagtail.blocks.RichTextBlock(
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "image_align",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("left", "Left"),
                                                    ("right", "Right"),
                                                ],
                                                help_text="Whether to align the image left or right on the block.",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "button",
                                            wagtail.blocks.StructBlock(
                                                [
                                                    (
                                                        "button_text",
                                                        wagtail.blocks.CharBlock(
                                                            required=False,
                                                        ),
                                                    ),
                                                    (
                                                        "page_link",
                                                        wagtail.blocks.PageChooserBlock(
                                                            required=False,
                                                        ),
                                                    ),
                                                ],
                                                required=False,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            (
                                "card_row",
                                wagtail.blocks.ListBlock(
                                    wagtail.blocks.StructBlock(
                                        [
                                            (
                                                "page",
                                                wagtail.blocks.PageChooserBlock(
                                                    required=True,
                                                ),
                                            ),
                                            (
                                                "text",
                                                wagtail.blocks.CharBlock(
                                                    required=False,
                                                ),
                                            ),
                                        ],
                                        label="Page",
                                    ),
                                    template="blocks/blocks/card_row.html",
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "height",
                                            wagtail.blocks.DecimalBlock(
                                                decimal_places=1,
                                                help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                                min_value=0,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ],
                        null=True,
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
    ]
