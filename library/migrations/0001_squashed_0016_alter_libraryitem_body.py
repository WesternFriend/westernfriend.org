# Generated by Django 4.2.1 on 2023-05-24 06:02

import blocks.blocks
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import documents.blocks
import modelcluster.contrib.taggit
import modelcluster.fields
import re
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_color_panel.blocks


class Migration(migrations.Migration):
    replaces = [
        ("library", "0001_initial"),
        ("library", "0002_alter_libraryitem_body"),
        ("library", "0003_alter_libraryitem_body"),
        ("library", "0004_alter_libraryitem_body"),
        ("library", "0005_alter_libraryitem_body"),
        ("library", "0006_alter_libraryitem_body"),
        ("library", "0007_alter_libraryitem_body"),
        ("library", "0008_alter_libraryitem_body"),
        ("library", "0009_alter_libraryitem_body"),
        ("library", "0010_alter_libraryitemtag_tag"),
        ("library", "0011_alter_libraryitem_body"),
        ("library", "0012_alter_libraryitem_body"),
        ("library", "0013_alter_libraryitem_body"),
        ("library", "0014_alter_libraryitem_body"),
        ("library", "0015_alter_libraryitem_body"),
        ("library", "0016_alter_libraryitem_body"),
    ]

    initial = True

    dependencies = [
        ("facets", "0001_initial"),
        ("wagtailcore", "0066_collection_management_permissions"),
        ("taggit", "0005_auto_20220424_2025"),
        ("taggit", "0004_alter_taggeditem_content_type_alter_taggeditem_tag"),
    ]

    operations = [
        migrations.CreateModel(
            name="LibraryIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="LibraryItem",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "publication_date",
                    models.DateField(
                        blank=True,
                        null=True,
                        verbose_name="Publication date",
                    ),
                ),
                (
                    "publication_date_is_approximate",
                    models.BooleanField(
                        default=False,
                        help_text="This field indicates when a library item wasn't published on a specific publication date.",
                    ),
                ),
                ("description", wagtail.fields.RichTextField(blank=True, null=True)),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("paragraph", wagtail.blocks.RichTextBlock()),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "width",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Enter the desired image width value in pixels up to 800 max.",
                                                max_value=800,
                                                min_value=0,
                                            ),
                                        ),
                                    ],
                                    classname="full title",
                                ),
                            ),
                            ("document", documents.blocks.DocumentEmbedBlock()),
                            ("media", blocks.blocks.MediaBlock(icon="media")),
                            ("embed", wagtail.embeds.blocks.EmbedBlock()),
                            ("url", wagtail.blocks.URLBlock()),
                            ("quote", wagtail.blocks.BlockQuoteBlock()),
                        ],
                        blank=True,
                        null=True,
                        use_json_field=None,
                    ),
                ),
                ("drupal_node_id", models.IntegerField(blank=True, null=True)),
                (
                    "item_audience",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="facets.audience",
                    ),
                ),
                (
                    "item_genre",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="facets.genre",
                    ),
                ),
                (
                    "item_medium",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="facets.medium",
                    ),
                ),
                (
                    "item_time_period",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="facets.timeperiod",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="LibraryItemTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "library_item",
                    modelcluster.fields.ParentalKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topics",
                        to="library.libraryitem",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_library_items",
                        to="facets.topic",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LibraryItemTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="library.libraryitem",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LibraryItemAuthor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="library_items_authored",
                        to="wagtailcore.page",
                    ),
                ),
                (
                    "library_item",
                    modelcluster.fields.ParentalKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authors",
                        to="library.libraryitem",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="libraryitem",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="library.LibraryItemTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    ("paragraph", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "target",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. Slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        default="#343a40",
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.FloatBlock(
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=None,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", wagtail.blocks.URLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", blocks.blocks.WfURLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    ("rich_text", wagtail.blocks.RichTextBlock()),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                                (
                                    "float",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[("left", "Left"), ("right", "Right")],
                                        help_test="Optionally align image left or right, using HTML float",
                                        icon="file-richtext",
                                        required=False,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", blocks.blocks.WfURLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    (
                        "rich_text",
                        wagtail.blocks.RichTextBlock(
                            features=[
                                "h2",
                                "h3",
                                "bold",
                                "italic",
                                "ol",
                                "ul",
                                "link",
                                "hr",
                            ],
                        ),
                    ),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                                (
                                    "align",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[("left", "Left"), ("right", "Right")],
                                        help_test="Optionally align image left or right",
                                        icon="file-richtext",
                                        required=False,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", blocks.blocks.WfURLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    (
                        "rich_text",
                        wagtail.blocks.RichTextBlock(
                            features=[
                                "h2",
                                "h3",
                                "bold",
                                "italic",
                                "ol",
                                "ul",
                                "link",
                                "hr",
                            ],
                        ),
                    ),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                                (
                                    "align",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[("left", "Left"), ("right", "Right")],
                                        help_test="Optionally align image left or right",
                                        icon="file-richtext",
                                        required=False,
                                    ),
                                ),
                                (
                                    "url",
                                    wagtail.blocks.URLBlock(
                                        help_text="Optional URL to use as image link.",
                                        required=False,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", blocks.blocks.WfURLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
        migrations.AlterField(
            model_name="libraryitem",
            name="body",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "heading_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "Level 2 (child of level 1)"),
                                            ("h3", "Level 3 (child of level 2)"),
                                            ("h4", "Level 4 (child of level 3)"),
                                            ("h5", "Level 5 (child of level 4)"),
                                            ("h6", "Level 6 (child of level 5)"),
                                        ],
                                        help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                    ),
                                ),
                                (
                                    "heading_text",
                                    wagtail.blocks.CharBlock(
                                        help_text="The text to appear in the heading.",
                                    ),
                                ),
                                (
                                    "target_slug",
                                    wagtail.blocks.CharBlock(
                                        help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                        required=False,
                                        validators=(
                                            django.core.validators.RegexValidator(
                                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                "invalid",
                                            ),
                                        ),
                                    ),
                                ),
                                (
                                    "color",
                                    wagtail_color_panel.blocks.NativeColorBlock(
                                        required=False,
                                    ),
                                ),
                            ],
                        ),
                    ),
                    (
                        "rich_text",
                        wagtail.blocks.RichTextBlock(
                            features=[
                                "h2",
                                "h3",
                                "bold",
                                "italic",
                                "ol",
                                "ul",
                                "link",
                                "hr",
                            ],
                        ),
                    ),
                    (
                        "image",
                        wagtail.blocks.StructBlock(
                            [
                                ("image", wagtail.images.blocks.ImageChooserBlock()),
                                (
                                    "width",
                                    wagtail.blocks.IntegerBlock(
                                        help_text="Enter the desired image width value in pixels up to 800 max.",
                                        max_value=800,
                                        min_value=0,
                                    ),
                                ),
                                (
                                    "align",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[("left", "Left"), ("right", "Right")],
                                        help_test="Optionally align image left or right",
                                        icon="file-richtext",
                                        required=False,
                                    ),
                                ),
                                (
                                    "link",
                                    wagtail.blocks.URLBlock(
                                        help_text="Optional web address to use as image link.",
                                        required=False,
                                    ),
                                ),
                            ],
                            classname="full title",
                        ),
                    ),
                    ("document", documents.blocks.DocumentEmbedBlock()),
                    ("media", blocks.blocks.MediaBlock(icon="media")),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                    ("url", blocks.blocks.WfURLBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    (
                        "spacer",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "height",
                                    wagtail.blocks.DecimalBlock(
                                        decimal_places=1,
                                        help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                        min_value=0,
                                    ),
                                ),
                            ],
                        ),
                    ),
                ],
                blank=True,
                null=True,
                use_json_field=True,
            ),
        ),
    ]
