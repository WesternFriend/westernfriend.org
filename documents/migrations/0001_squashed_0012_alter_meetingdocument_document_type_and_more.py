# Generated by Django 4.2.1 on 2023-05-24 05:59

import blocks.blocks
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import documents.blocks
import re
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_color_panel.blocks


class Migration(migrations.Migration):
    replaces = [
        ("documents", "0001_initial"),
        ("documents", "0002_rename_boarddocument_publicboarddocument"),
        ("documents", "0003_publicboarddocumentindexpage"),
        ("documents", "0004_alter_publicboarddocument_category_and_more"),
        ("documents", "0005_alter_publicboarddocument_category"),
        ("documents", "0006_alter_publicboarddocument_body"),
        ("documents", "0007_meetingdocumentindexpage_meetingdocument"),
        ("documents", "0008_alter_meetingdocument_options_and_more"),
        ("documents", "0009_alter_meetingdocument_options"),
        ("documents", "0010_meetingdocument_documents_m_documen_534774_idx"),
        ("documents", "0011_alter_meetingdocument_options"),
        ("documents", "0012_alter_meetingdocument_document_type_and_more"),
    ]

    initial = True

    dependencies = [
        ("contact", "0007_person_person_civicrm_9c9d2e_idx"),
        ("wagtailcore", "0083_workflowcontenttype"),
    ]

    operations = [
        migrations.CreateModel(
            name="PublicBoardDocumentIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="MeetingDocumentIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("intro", wagtail.fields.RichTextField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="MeetingDocument",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("publication_date", models.DateField()),
                ("drupal_node_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("epistle", "Epistle"),
                            ("minute", "Minute of Concern"),
                            ("photos", "Photos"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "heading",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_level",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "h2",
                                                        "Level 2 (child of level 1)",
                                                    ),
                                                    (
                                                        "h3",
                                                        "Level 3 (child of level 2)",
                                                    ),
                                                    (
                                                        "h4",
                                                        "Level 4 (child of level 3)",
                                                    ),
                                                    (
                                                        "h5",
                                                        "Level 5 (child of level 4)",
                                                    ),
                                                    (
                                                        "h6",
                                                        "Level 6 (child of level 5)",
                                                    ),
                                                ],
                                                help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                            ),
                                        ),
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="The text to appear in the heading.",
                                            ),
                                        ),
                                        (
                                            "target_slug",
                                            wagtail.blocks.CharBlock(
                                                help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                                required=False,
                                                validators=(
                                                    django.core.validators.RegexValidator(
                                                        re.compile(
                                                            "^[-a-zA-Z0-9_]+\\Z",
                                                        ),
                                                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                        "invalid",
                                                    ),
                                                ),
                                            ),
                                        ),
                                        (
                                            "color",
                                            wagtail_color_panel.blocks.NativeColorBlock(
                                                required=False,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            (
                                "rich_text",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "link",
                                        "superscript",
                                        "superscript",
                                        "strikethrough",
                                        "blockquote",
                                    ],
                                ),
                            ),
                            ("pullquote", blocks.blocks.PullQuoteBlock()),
                            ("document", documents.blocks.DocumentEmbedBlock()),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "width",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Enter the desired image width value in pixels up to 800 max.",
                                                max_value=800,
                                                min_value=0,
                                            ),
                                        ),
                                        (
                                            "align",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("left", "Left"),
                                                    ("right", "Right"),
                                                ],
                                                help_test="Optionally align image left or right",
                                                icon="file-richtext",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional web address to use as image link.",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    classname="full title",
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "height",
                                            wagtail.blocks.DecimalBlock(
                                                decimal_places=1,
                                                help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                                min_value=0,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ],
                        use_json_field=True,
                    ),
                ),
                (
                    "publishing_meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="published_documents",
                        to="contact.meeting",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "ordering": [
                    "-publication_date",
                    "publishing_meeting",
                    "document_type",
                    "title",
                ],
                "indexes": [
                    models.Index(
                        fields=["publication_date"],
                        name="documents_m_publica_bebe89_idx",
                    ),
                    models.Index(
                        fields=["document_type"],
                        name="documents_m_documen_534774_idx",
                    ),
                ],
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PublicBoardDocument",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("publication_date", models.DateField()),
                ("drupal_node_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            (
                                "corporation_documents_current_year",
                                "Corporation Documents - current year",
                            ),
                            (
                                "corporation_documents_prior_years",
                                "Corporation Documents - prior years",
                            ),
                            ("annual_reports", "Annual Reports"),
                            (
                                "relations_with_monthly_meetings",
                                "Relations with Monthly Meetings",
                            ),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            (
                                "heading",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "heading_level",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    (
                                                        "h2",
                                                        "Level 2 (child of level 1)",
                                                    ),
                                                    (
                                                        "h3",
                                                        "Level 3 (child of level 2)",
                                                    ),
                                                    (
                                                        "h4",
                                                        "Level 4 (child of level 3)",
                                                    ),
                                                    (
                                                        "h5",
                                                        "Level 5 (child of level 4)",
                                                    ),
                                                    (
                                                        "h6",
                                                        "Level 6 (child of level 5)",
                                                    ),
                                                ],
                                                help_text="These different heading levels help to communicate the organization and hierarchy of the content on a page.",
                                            ),
                                        ),
                                        (
                                            "heading_text",
                                            wagtail.blocks.CharBlock(
                                                help_text="The text to appear in the heading.",
                                            ),
                                        ),
                                        (
                                            "target_slug",
                                            wagtail.blocks.CharBlock(
                                                help_text="Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).",
                                                required=False,
                                                validators=(
                                                    django.core.validators.RegexValidator(
                                                        re.compile(
                                                            "^[-a-zA-Z0-9_]+\\Z",
                                                        ),
                                                        "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                                        "invalid",
                                                    ),
                                                ),
                                            ),
                                        ),
                                        (
                                            "color",
                                            wagtail_color_panel.blocks.NativeColorBlock(
                                                required=False,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            (
                                "rich_text",
                                wagtail.blocks.RichTextBlock(
                                    features=[
                                        "bold",
                                        "italic",
                                        "ol",
                                        "ul",
                                        "hr",
                                        "link",
                                        "superscript",
                                        "superscript",
                                        "strikethrough",
                                        "blockquote",
                                    ],
                                ),
                            ),
                            ("pullquote", blocks.blocks.PullQuoteBlock()),
                            ("document", documents.blocks.DocumentEmbedBlock()),
                            (
                                "image",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "image",
                                            wagtail.images.blocks.ImageChooserBlock(),
                                        ),
                                        (
                                            "width",
                                            wagtail.blocks.IntegerBlock(
                                                help_text="Enter the desired image width value in pixels up to 800 max.",
                                                max_value=800,
                                                min_value=0,
                                            ),
                                        ),
                                        (
                                            "align",
                                            wagtail.blocks.ChoiceBlock(
                                                choices=[
                                                    ("left", "Left"),
                                                    ("right", "Right"),
                                                ],
                                                help_test="Optionally align image left or right",
                                                icon="file-richtext",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "link",
                                            wagtail.blocks.URLBlock(
                                                help_text="Optional web address to use as image link.",
                                                required=False,
                                            ),
                                        ),
                                    ],
                                    classname="full title",
                                ),
                            ),
                            (
                                "spacer",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "height",
                                            wagtail.blocks.DecimalBlock(
                                                decimal_places=1,
                                                help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.",
                                                min_value=0,
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                        ],
                        use_json_field=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("wagtailcore.page",),
        ),
    ]
